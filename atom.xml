<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ksauzz weblog]]></title>
  <link href="http://ksauzz.github.com/atom.xml" rel="self"/>
  <link href="http://ksauzz.github.com/"/>
  <updated>2021-03-19T19:32:36+09:00</updated>
  <id>http://ksauzz.github.com/</id>
  <author>
    <name><![CDATA[ksauzz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlangのデバッグツール redbug]]></title>
    <link href="http://ksauzz.github.com/blog/2013/04/30/redbug/"/>
    <updated>2013-04-30T23:40:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2013/04/30/redbug</id>
    <content type="html"><![CDATA[<p><em>redbug</em>はErlangコードのトレースに使用するデバッグ用ツールです。
 <a href="https://code.google.com/p/eper/">eper</a> というパフォーマンス関連ツールの一部として配布されています。
これを使うと、指定した関数のトレースがとても手軽に行えます。</p>

<p>redbugで出来る事</p>

<ul>
<li>モジュール名、関数名、引数でのトレース対象指定(ワイルドカード可)</li>
<li>引数の確認</li>
<li>戻り値の確認</li>
<li>コールスタックの確認</li>
</ul>


<p>Riakでの実行例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(riak1@127.0.0.1)81&gt; redbug:start({riak_kv_vnode, put,[return, stack]},[{time,5000},{msgs,4},{max_msg_size,10000
</span><span class='line'>000},{print_depth,10}]).
</span><span class='line'>ok
</span><span class='line'>
</span><span class='line'>20:17:34 &lt;{riak_kv_put_fsm,init,1}&gt; {riak_kv_vnode,put,
</span><span class='line'>                                     [[{685078892498860742907977265335757665463718379520,
</span><span class='line'>                                        'riak1@127.0.0.1'},
</span><span class='line'>                                       {707914855582156101004909840846949587645842325504,
</span><span class='line'>                                        'riak1@127.0.0.1'}],
</span><span class='line'>                                      {&lt;&lt;"bucket"&gt;&gt;,&lt;&lt;"key1"&gt;&gt;},
</span><span class='line'>                                      {r_object,&lt;&lt;"buck"...&gt;&gt;,&lt;&lt;...&gt;&gt;,...},
</span><span class='line'>                                      87431492,63534539854,[]]}
</span><span class='line'>  "proc_lib:init_p_do_apply/3 "
</span><span class='line'>  "gen_fsm:handle_msg/7 "
</span><span class='line'>
</span><span class='line'>.. 略 ..
</span><span class='line'>
</span><span class='line'>20:17:34 &lt;{riak_kv_put_fsm,init,1}&gt; {riak_kv_vnode,put,6} -&gt; ok
</span><span class='line'>quitting: msg_count</span></code></pre></td></tr></table></div></figure>


<p>動作確認環境</p>

<p><code>OSX 10.8.3 R15B03</code>, <code>CentOS 6.3 R15B01</code></p>

<h2>導入方法</h2>

<p>rebarを使っていればrebar.configのdepsにeperを追加するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="n">eper</span><span class="p">,</span> <span class="s">&quot;0.61&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/basho/eper.git&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">branch</span><span class="p">,</span> <span class="n">master</span><span class="p">}}}</span>
</span><span class='line'>       <span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>TODO: rebarを使わない方法</p>

<h2>動作確認</h2>

<p>sampleモジュールを例に、簡単に動作確認をしてみます。</p>

<h3>1. erlの起動</h3>

<p>まずはErlangシェルを起動します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% erl -pa ebin/ deps/*/ebin</span>
</span><span class='line'><span class="nv">Erlang</span> <span class="nv">R15B03</span> <span class="p">(</span><span class="n">erts</span><span class="o">-</span><span class="mi">5</span><span class="p">.</span><span class="mi">9</span><span class="p">.</span><span class="mi">3</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span> <span class="p">[</span><span class="n">source</span><span class="p">]</span> <span class="p">[</span><span class="mi">64</span><span class="o">-</span><span class="n">bit</span><span class="p">]</span> <span class="p">[</span><span class="nn">smp</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span> <span class="p">[</span><span class="n">async</span><span class="o">-</span><span class="nn">threads</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="n">kernel</span><span class="o">-</span><span class="nn">poll</span><span class="p">:</span><span class="n">false</span><span class="p">]</span> <span class="p">[</span><span class="n">dtrace</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Eshell</span> <span class="nv">V5</span><span class="p">.</span><span class="mi">9</span><span class="p">.</span><span class="mi">3</span><span class="p">.</span><span class="mi">1</span>  <span class="p">(</span><span class="n">abort</span> <span class="n">with</span> <span class="err">^</span><span class="nv">G</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. redbugの起動</h3>

<p><code>redbug:start/1</code>でトレース対象のモジュール名(sample)を指定し、redbugを起動します。
<small>※15sec(default)でトレース処理が終了してしまうので気をつけましょう。 </small></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">redbug</span><span class="p">:</span><span class="n">start</span><span class="p">(</span><span class="n">sample</span><span class="p">).</span>
</span><span class='line'><span class="n">ok</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. トレース対象のコードを実行</h3>

<p>トレース対象のsampleモジュールを実行し、トレースの様子を確認します。
<small>尚、ここで実行する<code>sample:start_link/0</code>は間接的に<code>sample:init/1</code>を呼び出すコードになっています。</small></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">sample</span><span class="p">:</span><span class="n">start_link</span><span class="p">().</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">41</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>するとコンソールに次の内容が出力されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">20</span><span class="p">:</span><span class="mi">43</span><span class="p">:</span><span class="mi">07</span> <span class="o">&lt;</span><span class="p">{</span><span class="n">erlang</span><span class="p">,</span><span class="nb">apply</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">sample</span><span class="p">,</span><span class="n">start_link</span><span class="p">,[]}</span>
</span><span class='line'>
</span><span class='line'><span class="mi">20</span><span class="p">:</span><span class="mi">43</span><span class="p">:</span><span class="mi">07</span> <span class="o">&lt;</span><span class="n">sample</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">sample</span><span class="p">,</span><span class="n">init</span><span class="p">,[[]]}</span>
</span><span class='line'><span class="nn">quitting</span><span class="p">:</span> <span class="n">timeout</span>
</span></code></pre></td></tr></table></div></figure>


<p>これがトレース結果です。簡単ですが<code>sample:start_link()</code>と<code>sample:init([])</code>がコールされた事が示されています。</p>

<h2>使用例</h2>

<p>redbugはトレース条件、オプションを指定することで様々なトレースを行うことができます。ここではその一部を紹介します。</p>

<pre><code>Usage
-----
redbug:start(Trc)                %% トレース条件のみ指定
redbug:start(Trc, Opts)          %% トレース条件, オプション指定
redbug:start(Timeout, Msgs, Trc) %% トレース条件, タイムアウト, トレース数指定(オプション指定不能)
</code></pre>

<h3>サンプル</h3>

<p>riak_kv_get_fsmモジュールの呼び出しをtrace</p>

<pre><code>redbug:start(riak_kv_get_fsm).
</code></pre>

<p>riak_kv_get_fsm:initの呼び出しをtrace</p>

<pre><code>redbug:start(riak_kv_get_fsm, init).
or
redbug:start({riak_kv_get_fsm, init}).
</code></pre>

<p>riak_kv_get_fsmの呼び出し、戻り値をtrace</p>

<pre><code>redbug:start({riak_kv_get_fsm, '_', [return]}).
</code></pre>

<p>riak_kv_get_fsm:initの呼び出し、戻り値、コールスタックをtrace</p>

<pre><code>redbug:start({riak_kv_get_fsm, init, [return, stack]}).
</code></pre>

<p>riak_kv_put_fsm:execute(pw, _, default)の呼び出し、戻り値をtrace (引数によるマッチング)</p>

<pre><code>redbug:start({riak_kv_put_fsm, '_', [{pw,'_',default},return]}).
</code></pre>

<p>riak_kv_get_fsm:initの呼び出しをtrace、Timeout 1,000msec</p>

<pre><code>redbug:start({riak_kv_get_fsm, init}, [{time, 1000}]).
</code></pre>

<p>riak_kv_get_fsm:initの呼び出しをtrace、Timeout 1,000msec</p>

<pre><code>redbug:start({riak_kv_get_fsm, init}, [{time, 1000}, {msgs, 20}]).
</code></pre>

<h3>その他オプションとそのデフォルト値</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="n">time</span>         <span class="o">=</span> <span class="mi">15000</span>        <span class="c">% ms</span>
</span><span class='line'><span class="n">msgs</span>         <span class="o">=</span> <span class="mi">10</span>           <span class="c">% unit</span>
</span><span class='line'><span class="n">proc</span>         <span class="o">=</span> <span class="n">all</span>          <span class="c">% list of procs (or &#39;all&#39;)</span>
</span><span class='line'><span class="n">target</span>       <span class="o">=</span> <span class="nb">node</span><span class="p">()</span>       <span class="c">% target node</span>
</span><span class='line'><span class="n">cookie</span>       <span class="o">=</span> <span class="err">&#39;&#39;</span>           <span class="c">% target node cookie</span>
</span><span class='line'><span class="n">buffered</span>     <span class="o">=</span> <span class="n">no</span>           <span class="c">% output buffering</span>
</span><span class='line'><span class="n">arity</span>        <span class="o">=</span> <span class="n">false</span>        <span class="c">% arity instead of args</span>
</span><span class='line'><span class="n">print_call</span>   <span class="o">=</span> <span class="n">true</span>         <span class="c">% print calls (see `return_only&#39;)</span>
</span><span class='line'><span class="n">print_form</span>   <span class="o">=</span> <span class="s">&quot;</span><span class="si">~s~n</span><span class="s">&quot;</span>       <span class="c">% format for printing</span>
</span><span class='line'><span class="n">print_file</span>   <span class="o">=</span> <span class="s">&quot;&quot;</span>           <span class="c">% file to print to (standard_io)</span>
</span><span class='line'><span class="n">print_msec</span>   <span class="o">=</span> <span class="n">false</span>        <span class="c">% print milliseconds in timestamps?</span>
</span><span class='line'><span class="n">print_depth</span>  <span class="o">=</span> <span class="mi">999999</span>       <span class="c">% Limit for &quot;~P&quot; formatting depth</span>
</span><span class='line'><span class="n">print_re</span>     <span class="o">=</span> <span class="s">&quot;&quot;</span>           <span class="c">% regexp that must match to print</span>
</span><span class='line'><span class="n">max_queue</span>    <span class="o">=</span> <span class="mi">5000</span>         <span class="c">% max # of msgs before suicide</span>
</span><span class='line'><span class="n">max_msg_size</span> <span class="o">=</span> <span class="mi">50000</span>        <span class="c">% max message size before suicide</span>
</span><span class='line'><span class="n">file</span>         <span class="o">=</span> <span class="s">&quot;&quot;</span>           <span class="c">% file to write trace msgs to</span>
</span><span class='line'><span class="n">file_size</span>    <span class="o">=</span> <span class="mi">1</span>            <span class="c">% file size (per file [Mb])</span>
</span><span class='line'><span class="n">file_count</span>   <span class="o">=</span> <span class="mi">8</span>            <span class="c">% number of files in wrap log</span>
</span></code></pre></td></tr></table></div></figure>


<p>ざっくりですが以上です。</p>

<p>余談ですが、Riakはeperを含んでいるので、<code>riak attach</code>するだけでredbugで内部をトレースできます。redbugはRiakの勉強にも、もってこいですね。ではでは。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ひとりでやる(?)Riak Advent Calendar 2012 day7 - Ruby Clientで遊んでみよう ]]></title>
    <link href="http://ksauzz.github.com/blog/2012/12/12/riak-advent-calendar-2013-07/"/>
    <updated>2012-12-12T23:29:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/12/12/riak-advent-calendar-2013-07</id>
    <content type="html"><![CDATA[<p>ということでRiakのRubyライブラリをご紹介。RiakのProtocol Buffer/HTTPクライアントであるriak-ruby-clientとObject MapperであるRippleの２本立てです。Rippleに関してはRailsへの導入方法を簡単に説明します。</p>

<ul>
<li>riak-ruby-clientの使い方</li>
<li>RailsへRippleを導入する</li>
</ul>


<h2><a href="https://github.com/basho/riak-ruby-client">riak-ruby-client</a>の使い方</h2>

<h3>インストール</h3>

<p>gemでサクッとインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem install riak-client
</span><span class='line'>Successfully installed riak-client-1.1.0
</span><span class='line'>1 gem installed</span></code></pre></td></tr></table></div></figure>


<h3>利用方法</h3>

<h4>1. Clientの生成</h4>

<p>Procotol Bufferを使うか、HTTPを使うかをnewするときに指定できます。</p>

<h5>1.1. HTTP</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;riak&#39;</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Riak</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<h5>1.2. Protocol Buffer</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;riak&#39;</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Riak</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:protocol</span> <span class="o">=&gt;</span> <span class="s2">&quot;pbc&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>1.3. 複数ノードへの接続</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;riak&#39;</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Riak</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:nodes</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s1">&#39;10.0.0.1&#39;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s1">&#39;10.0.0.2&#39;</span><span class="p">,</span> <span class="ss">:pb_port</span> <span class="o">=&gt;</span> <span class="mi">7070</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s1">&#39;10.0.0.3&#39;</span><span class="p">,</span> <span class="ss">:http_port</span> <span class="o">=&gt;</span> <span class="mi">8080</span><span class="p">}</span>
</span><span class='line'><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. Objectを保存する</h4>

<p>生成したclientを使ってObjectを保存します。
やり方が３パターンほどあるので、それぞれサンプルをご紹介。
Riak::RObjectの生成方法が違うだけでやっていることは同じです。</p>

<h5>2.1 シンプルに使う</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bucket</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="s2">&quot;doc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">object</span> <span class="o">=</span> <span class="n">bucket</span><span class="o">.</span><span class="n">get_or_new</span><span class="p">(</span><span class="s2">&quot;index.html&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">object</span><span class="o">.</span><span class="n">raw_data</span> <span class="o">=</span> <span class="s2">&quot;&lt;html&gt;&lt;body&gt;Hello, world!&lt;/body&gt;&lt;/html&gt;&quot;</span>
</span><span class='line'><span class="n">object</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s2">&quot;text/html&quot;</span>
</span><span class='line'><span class="n">object</span><span class="o">.</span><span class="n">store</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2.2 Riak::RObjectを明示的に利用</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bucket</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="s2">&quot;doc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">new_one</span> <span class="o">=</span> <span class="no">Riak</span><span class="o">::</span><span class="no">RObject</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="s2">&quot;index2.html&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">object</span><span class="o">.</span><span class="n">raw_data</span> <span class="o">=</span> <span class="s2">&quot;&lt;html&gt;&lt;body&gt;Hello, world!&lt;/body&gt;&lt;/html&gt;&quot;</span>
</span><span class='line'><span class="n">object</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s2">&quot;text/html&quot;</span>
</span><span class='line'><span class="n">object</span><span class="o">.</span><span class="n">store</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2.3 ハッシュを使って</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">object</span> <span class="o">=</span> <span class="n">client</span><span class="o">[</span><span class="s1">&#39;doc&#39;</span><span class="o">][</span><span class="s1">&#39;index.html&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">object</span><span class="o">.</span><span class="n">raw_data</span> <span class="o">=</span> <span class="s2">&quot;&lt;html&gt;&lt;body&gt;Hello, world!&lt;/body&gt;&lt;/html&gt;&quot;</span>
</span><span class='line'><span class="n">object</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="s2">&quot;text/html&quot;</span>
</span><span class='line'><span class="n">object</span><span class="o">.</span><span class="n">store</span>
</span></code></pre></td></tr></table></div></figure>


<p>保存したデータを<a href="https://github.com/jkbr/httpie">httpie</a>で確認してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% http </span><span class="n">localhost</span><span class="p">:</span><span class="mi">8098</span><span class="o">/</span><span class="n">buckets</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">keys</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="no">HTTP</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="mi">200</span> <span class="no">OK</span>
</span><span class='line'><span class="no">Content</span><span class="o">-</span><span class="no">Length</span><span class="p">:</span> <span class="mi">39</span>
</span><span class='line'><span class="no">Content</span><span class="o">-</span><span class="no">Type</span><span class="p">:</span> <span class="n">text</span><span class="o">/</span><span class="n">html</span><span class="p">;</span> <span class="n">charset</span><span class="o">=</span><span class="no">UTF</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="no">Date</span><span class="p">:</span> <span class="no">Wed</span><span class="p">,</span> <span class="mi">12</span> <span class="no">Dec</span> <span class="mi">2012</span> <span class="mi">16</span><span class="p">:</span><span class="mi">55</span><span class="p">:</span><span class="mi">44</span> <span class="no">GMT</span>
</span><span class='line'><span class="no">ETag</span><span class="p">:</span> <span class="s2">&quot;44tAJLzAUJTa20TtR8s5fJ&quot;</span>
</span><span class='line'><span class="no">Last</span><span class="o">-</span><span class="no">Modified</span><span class="p">:</span> <span class="no">Wed</span><span class="p">,</span> <span class="mi">12</span> <span class="no">Dec</span> <span class="mi">2012</span> <span class="mi">14</span><span class="p">:</span><span class="mi">53</span><span class="p">:</span><span class="mi">48</span> <span class="no">GMT</span>
</span><span class='line'><span class="no">Link</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/buckets/</span><span class="n">doc</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">rel</span><span class="o">=</span><span class="s2">&quot;up&quot;</span>
</span><span class='line'><span class="no">Server</span><span class="p">:</span> <span class="no">MochiWeb</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="no">WebMachine</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">0</span> <span class="p">(</span><span class="n">someone</span> <span class="n">had</span> <span class="n">painted</span> <span class="n">it</span> <span class="n">blue</span><span class="p">)</span>
</span><span class='line'><span class="no">Vary</span><span class="p">:</span> <span class="no">Accept</span><span class="o">-</span><span class="no">Encoding</span>
</span><span class='line'><span class="n">X</span><span class="o">-</span><span class="no">Riak</span><span class="o">-</span><span class="no">Vclock</span><span class="p">:</span> <span class="n">a85hYGBgzGDKBVIcypz</span><span class="o">/</span><span class="n">fgacmLY0gymRKY</span><span class="o">+</span><span class="no">VoUbM9hRfFgA</span><span class="o">=</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;&lt;</span><span class="n">body</span><span class="o">&gt;</span><span class="no">Hello</span><span class="p">,</span> <span class="n">world!</span><span class="o">&lt;</span><span class="sr">/body&gt;&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>はい、確認できました。
簡単ですがriak-ruby-clientの紹介はここまで。</p>

<h2>RailsへRippleを導入する</h2>

<p><a href="https://github.com/basho/ripple">Ripple</a> - A rich Ruby modeling layer for Riak -</p>

<p>RippleはRiakのデータをオブジェクトにマッピングしてくれるライブラリです。ActiveRecordライクに利用できます。
Riakを使ってアプリケーションを作る際には、基本的にRippleやそれに類似したライブラリを使うことになる筈です。</p>

<p>それではRailsへRippleを導入する方法を簡単に紹介します。</p>

<p>なお、このサンプルではRails 3.2.8を使用しています。</p>

<h4>1. Railsアプリケーションの生成</h4>

<p><code>rails new</code>でアプリケーションを生成します</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% rails </span><span class="kp">new</span> <span class="n">ripple</span><span class="o">-</span><span class="n">example</span>
</span><span class='line'>      <span class="n">create</span>
</span><span class='line'>      <span class="n">create</span>  <span class="no">README</span><span class="o">.</span><span class="n">rdoc</span>
</span><span class='line'>      <span class="n">create</span>  <span class="no">Rakefile</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">config</span><span class="o">.</span><span class="n">ru</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="sx">% cd </span><span class="n">ripple</span><span class="o">-</span><span class="n">example</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. rippleをdependenciesへ追加</h4>

<p>Gemfileに以下を追加します。
Railsの3.2.8を使っているのでrippleは1.0.0.beta2を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;ripple&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt;1.0.0.beta2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>bundle installします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3. セットアップ</h4>

<p><code>rails g ripple</code>します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% rails </span><span class="n">g</span> <span class="n">ripple</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">config</span><span class="o">/</span><span class="n">ripple</span><span class="o">.</span><span class="n">yml</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">app</span><span class="o">/</span><span class="n">mapreduce</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">app</span><span class="o">/</span><span class="n">mapreduce</span><span class="o">/</span><span class="n">contrib</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">app</span><span class="o">/</span><span class="n">mapreduce</span><span class="o">/</span><span class="n">iso8601</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">app</span><span class="o">/</span><span class="n">mapreduce</span><span class="o">/</span><span class="n">ripple</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>      <span class="n">insert</span>  <span class="nb">test</span><span class="o">/</span><span class="n">test_helper</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">insert</span>  <span class="nb">test</span><span class="o">/</span><span class="n">test_helper</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>config/ripple.ymlを編集してRiakの設定を自分の環境に合わせます。
sourceにはローカルのriakコマンドがインストールされているパスを設定してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">development</span><span class="p">:</span>
</span><span class='line'>  <span class="n">http_port</span><span class="p">:</span> <span class="mi">8098</span>
</span><span class='line'>  <span class="n">pb_port</span><span class="p">:</span> <span class="mi">8087</span>
</span><span class='line'>  <span class="n">host</span><span class="p">:</span> <span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'>  <span class="n">source</span><span class="p">:</span><span class="sr"> /usr/</span><span class="n">local</span><span class="o">/</span><span class="n">bin</span>  <span class="c1">#Default for Homebrew.</span>
</span></code></pre></td></tr></table></div></figure>


<p>それでは試しにmodelを生成します。
propertiesとしてname, ageを指定してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% rails </span><span class="n">g</span> <span class="n">ripple</span><span class="ss">:model</span> <span class="no">User</span> <span class="nb">name</span><span class="ss">:string</span> <span class="n">age</span><span class="ss">:integer</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">user</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">test_unit</span>
</span><span class='line'>      <span class="n">create</span>    <span class="nb">test</span><span class="o">/</span><span class="n">unit</span><span class="o">/</span><span class="n">user_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">create</span>    <span class="nb">test</span><span class="o">/</span><span class="n">fixtures</span><span class="o">/</span><span class="n">users</span><span class="o">.</span><span class="n">yml</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成したModelはこんな感じになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Ripple</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:name</span><span class="p">,</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:age</span><span class="p">,</span> <span class="nb">Integer</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. 動作確認</h4>

<p>consoleで動作確認してみます。
まずはデータを保存。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% rails </span><span class="n">console</span>
</span><span class='line'><span class="no">Loading</span> <span class="n">development</span> <span class="n">environment</span> <span class="p">(</span><span class="no">Rails</span> <span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="no">User</span><span class="p">:</span><span class="o">[</span><span class="kp">new</span><span class="o">]</span> <span class="nb">name</span><span class="o">=</span><span class="kp">nil</span> <span class="n">age</span><span class="o">=</span><span class="kp">nil</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;たろう&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;たろう&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">18</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">004</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">005</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">key</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;QB4nWCL1SpvCe5csclOUgmNX7XN&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>保存後に取得したkeyの値がオブジェクトのIDとなります。
このIDを使ってデータが保存されたか確認してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">006</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span> <span class="s2">&quot;QB4nWCL1SpvCe5csclOUgmNX7XN&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="no">User</span><span class="ss">:QB4nWCL1SpvCe5csclOUgmNX7XN</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;たろう&quot;</span> <span class="n">age</span><span class="o">=</span><span class="mi">18</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>はい、保存されていますね。</p>

<p>なお、オブジェクトのID(riakのkey名)は、以下の<code>key\_on</code>をModel内で指定する事により、
自動生成された値でなく、特定のproperyを使用することができます。
下記の例だとkey_nameというpropertyがriakのkey名に使われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">key_on</span> <span class="ss">:key_name</span> <span class="c1"># use :key_name as key name.</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じでRiak+Railsのアプリケーションを作って遊んでみてはいかがでしょうか。
今日はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantメモ]]></title>
    <link href="http://ksauzz.github.com/blog/2012/11/19/how-to-use-vagrant/"/>
    <updated>2012-11-19T01:09:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/11/19/how-to-use-vagrant</id>
    <content type="html"><![CDATA[<h3>create vagrant box using veewee.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant basebox templates
</span><span class='line'>The following templates are available:
</span><span class='line'>vagrant basebox define '&lt;boxname&gt;' 'CentOS-4.8-i386'
</span><span class='line'>vagrant basebox define '&lt;boxname&gt;' 'CentOS-5.5-i386-netboot'
</span><span class='line'>vagrant basebox define '&lt;boxname&gt;' 'CentOS-5.5-x86_64-netboot'
</span><span class='line'>vagrant basebox define '&lt;boxname&gt;' 'CentOS-5.6-i386'
</span><span class='line'>vagrant basebox define '&lt;boxname&gt;' 'CentOS-5.6-i386-netboot'
</span><span class='line'>...
</span><span class='line'>$ vagrant basebox define 'CentOS-6.2-x86_64-minimal'  'CentOS-6.2-x86_64-minimal'
</span><span class='line'>
</span><span class='line'>  *customizing definitions*
</span><span class='line'>
</span><span class='line'>$ vagrant basebox build CentOS-6.2-x86_64-minimal
</span><span class='line'>$ vagrant basebox export CentOS-6.2-x86_64-minimal
</span><span class='line'>$ vagrant box add CentOS-6.2-x86_64-minimal CentOS-6.2-x86_64-minimal.box</span></code></pre></td></tr></table></div></figure>


<h3>create and connect to VM.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init CentOS-6.2-x86_64-minimal
</span><span class='line'>$ vagrant up
</span><span class='line'>$ vagrant ssh</span></code></pre></td></tr></table></div></figure>


<h3>no-provision</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant up --no-provision</span></code></pre></td></tr></table></div></figure>


<h3>debugging</h3>

<p>verbose logging.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VAGRANT_LOG=INFO vagrant up</span></code></pre></td></tr></table></div></figure>


<p>check console with gui mode.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.vm.boot_mode = :gui</span></code></pre></td></tr></table></div></figure>


<h3>default account</h3>

<p>id/pass</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant/vagrant
</span><span class='line'>root/vagrant</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[erlの停止]]></title>
    <link href="http://ksauzz.github.com/blog/2012/11/18/shutdown-erl/"/>
    <updated>2012-11-18T23:06:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/11/18/shutdown-erl</id>
    <content type="html"><![CDATA[<p>erlangシェルを停止させるとき、<code>q()</code>だと停止に時間が掛かり、<code>&lt;Crt+G&gt;, q</code>だと即座に停止する。
この２つの違いを先日追いかけたので記録しておく。</p>

<h3>q() の場合</h3>

<p>まずはerlシェル上でq()を呼び出した場合の挙動。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Eshell V5.9.2  (abort with ^G)
</span><span class='line'>1&gt; q().
</span><span class='line'>ok</span></code></pre></td></tr></table></div></figure>


<p>マニュアルによるとこれは<code>shell_default:q/0</code>を呼び出している。</p>

<figure class='code'><figcaption><span>lib/stdlib/src/shell_default.erl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">q</span><span class="p">()_____</span><span class="o">-&gt;</span> <span class="nn">c</span><span class="p">:</span><span class="n">q</span><span class="p">().</span>
</span></code></pre></td></tr></table></div></figure>


<p>最終的に<code>init:stop/0</code></p>

<figure class='code'><figcaption><span>stdlib/src/c.erl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">q</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">init</span><span class="p">:</span><span class="n">stop</span><span class="p">().</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>init:stop/0</code>はコードが負えなかったので、<code>man init</code>を読む。すると</p>

<blockquote><p>All applications are taken down smoothly, all code is unloaded, and all ports are closed before the system terminates.</p></blockquote>


<p>となっており、アプリケーションを正式な手順で停止させる雰囲気。</p>

<p>追記: たぶん<code>erts/preloaded/src/init.erl</code>から更に追える。</p>

<h3>&lt;Crl+G>, q の場合</h3>

<p>次にCrl+G, qの場合。(JCLモードで<code>q</code>)</p>

<figure class='code'><figcaption><span>stdlib/src/c.erl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Eshell</span> <span class="nv">V5</span><span class="p">.</span><span class="mi">9</span><span class="p">.</span><span class="mi">2</span>  <span class="p">(</span><span class="n">abort</span> <span class="n">with</span> <span class="err">^</span><span class="nv">G</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>
</span><span class='line'><span class="nv">User</span> <span class="n">switch</span> <span class="n">command</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">q</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>User switch command</code>でgrepすると<code>user_drv.erl</code>が使われている様子。</p>

<figure class='code'><figcaption><span>lib/kernel/src/user_drv.erl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">switch_cmd</span><span class="p">({</span><span class="n">ok</span><span class="p">,[{</span><span class="n">atom</span><span class="p">,_,</span><span class="n">q</span><span class="p">}],_},</span> <span class="nv">Iport</span><span class="p">,</span> <span class="nv">Oport</span><span class="p">,</span> <span class="nv">Gr</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">erlang</span><span class="p">:</span><span class="nb">system_info</span><span class="p">(</span><span class="n">break_ignored</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">true</span> <span class="o">-&gt;</span><span class="p">_________________</span><span class="c">% noop</span>
</span><span class='line'>        <span class="n">io_request</span><span class="p">({</span><span class="n">put_chars</span><span class="p">,</span><span class="n">unicode</span><span class="p">,</span><span class="s">&quot;Unknown command</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">},</span> <span class="nv">Iport</span><span class="p">,</span> <span class="nv">Oport</span><span class="p">),</span>
</span><span class='line'>        <span class="n">switch_loop</span><span class="p">(</span><span class="nv">Iport</span><span class="p">,</span> <span class="nv">Oport</span><span class="p">,</span> <span class="nv">Gr</span><span class="p">);</span>
</span><span class='line'>    <span class="n">false</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">halt</span><span class="p">()</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>man erlang</code>より</p>

<blockquote><p>For  integer  Status the Erlang runtime system closes all ports and allows async threads to finish their operations before exiting.</p></blockquote>


<h3>まとめ</h3>

<ul>
<li><code>q()</code> はapplicationの停止、コードのunloadをした上でruntimeを停止</li>
<li><code>&lt;Crl+G&gt;, q</code>は単にruntimeを停止</li>
</ul>


<p>諸々調べた後でマニュアルに停止方法が纏めてあることに気づいたが、
なぜか<code>q()</code>が紹介されていなかった。</p>

<blockquote><p>4.4  How do I quit the Erlang shell?<br/>  To shut a system down cleanly,  use init:stop().<br/>  Some quick ways are evaluating halt(). or Control+&#46;<br/>  Control+C and Control+G give you access to menus.</p></blockquote>


<p>そういえば<code>erts/preloaded</code>にはerlang, prim_inet, initモジュール等が入っているので追っかけてみると楽しいかもしれない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP環境メモ]]></title>
    <link href="http://ksauzz.github.com/blog/2012/11/16/setup-php/"/>
    <updated>2012-11-16T11:00:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/11/16/setup-php</id>
    <content type="html"><![CDATA[<p>PHPを触ることになったので環境設定をメモ。</p>

<p>とりあえずは phpenv, php-build, composer, phpunit をチョイス。</p>

<h1>PHP</h1>

<h2>install phpenv</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://raw.github.com/CHH/phpenv/master/bin/phpenv-install.sh | sh
</span><span class='line'>echo export PATH = ~/.phpenv/bin:$PATH &gt;&gt; ~/.zshrc
</span><span class='line'>echo eval "$(phpenv init - zsh)" ~/.zshrc
</span><span class='line'>source ~/.zshrc</span></code></pre></td></tr></table></div></figure>


<h2>install php-build</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p ~/.phpenv/plugins
</span><span class='line'>cd ~/.phpenv/plugins
</span><span class='line'>git clone git://github.com/CHH/php-build.git
</span><span class='line'>curl https://raw.github.com/hnw/php-build/plugin-to-chh-phpenv/bin/rbenv-install &gt; php-build/bin/rbenv-install
</span><span class='line'>chmod 755 php-build/bin/rbenv-install</span></code></pre></td></tr></table></div></figure>


<h2>install php</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install libjpeg re2c mcrypt
</span><span class='line'>phpenv install 5.4.8</span></code></pre></td></tr></table></div></figure>


<h1>Composer (Package manager)</h1>

<h2>install composer</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s https://getcomposer.org/installer | php && mv -v composer.phar /usr/local/bin/composer
</span></code></pre></td></tr></table></div></figure>


<h2>create composer.json</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "config": {
</span><span class='line'>        "bin-dir": "."
</span><span class='line'>    },
</span><span class='line'>    "require": {
</span><span class='line'>        "xxx/xxxx": "2.*"
</span><span class='line'>    },
</span><span class='line'>    "require-dev": {
</span><span class='line'>        "phpunit/phpunit": "3.7.*",
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>install dependencies(with require-dev)</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer install --dev
</span><span class='line'>        or
</span><span class='line'>composer update --dev</span></code></pre></td></tr></table></div></figure>


<h1>PHPUnit</h1>

<h2>configuration file.</h2>

<p>create <code>phpunit.xml.dist</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;phpunit
</span><span class='line'>    bootstrap="vendor/autoload.php"
</span><span class='line'>    processIsolation="false"
</span><span class='line'>    verbose="true"
</span><span class='line'>    strict="false"
</span><span class='line'>    colors="true"&gt;
</span><span class='line'>    &lt;testsuites&gt;
</span><span class='line'>        &lt;testsuite name="PHPUnit"&gt;
</span><span class='line'>            &lt;directory&gt;test&lt;/directory&gt;
</span><span class='line'>        &lt;/testsuite&gt;
</span><span class='line'>    &lt;/testsuites&gt;
</span><span class='line'>&lt;/phpunit&gt;</span></code></pre></td></tr></table></div></figure>


<h2>run test</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./phpunit</span></code></pre></td></tr></table></div></figure>


<h4>参考</h4>

<ul>
<li><a href="http://qiita.com/items/81085381c4281e498cde">http://qiita.com/items/81085381c4281e498cde</a></li>
<li><a href="http://blog.yuyat.jp/archives/1446">http://blog.yuyat.jp/archives/1446</a></li>
<li><a href="http://d.hatena.ne.jp/hnw/20120828">http://d.hatena.ne.jp/hnw/20120828</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing http trace on CentOS]]></title>
    <link href="http://ksauzz.github.com/blog/2012/11/15/installing-http-trace-on-centos/"/>
    <updated>2012-11-15T11:56:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/11/15/installing-http-trace-on-centos</id>
    <content type="html"><![CDATA[<p>コピペ用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://nodejs.tchol.org/repocfg/el/nodejs-stable-release.noarch.rpm
</span><span class='line'>yum localinstall --nogpgcheck -y nodejs-stable-release.noarch.rpm
</span><span class='line'>yum install -y nodejs-compat-symlinks npm libpcap-devel
</span><span class='line'>npm -g install http_trace</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressを別マシンでセットアップ]]></title>
    <link href="http://ksauzz.github.com/blog/2012/10/11/octopress-on-another-machine/"/>
    <updated>2012-10-11T19:29:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/10/11/octopress-on-another-machine</id>
    <content type="html"><![CDATA[<p>ご覧のとおり、このブログはOctopressを使っています。
最近、新しいマシンでブログを書こうとしたら、<code>rake deploy</code>が上手く動かなかったよという話。
<code>git clone</code>しただけではダメみたいです。</p>

<p>ちなみにOctopressのverisionは2.0</p>

<h4>手順</h4>

<ol>
<li>github上でデフォルトのブランチをsourceにする。</li>
<li><code>git clone</code></li>
<li><code>rake setup_github_pages</code></li>
</ol>


<p>要するに<code>rake setup_github_pages</code>しとけという話です。</p>

<p>１は必須ではないと思いますが、やっとくと楽です。
これで無事デプロイできるようになりました。ってまぁ、このエントリが公開されてることがその証明なわけです。</p>

<p>原因はデプロイ用の<code>_deploy</code>ディレクトリがorigin/masterに紐付いてなかったこと。</p>

<p>Rakefileを見ればわかりますが、<code>setup_github_pages</code>の役割は元のoctopressのリポジトリをどけるだけでなく、
ローカルリポジトリの<code>_deploy</code>ディレクトリを<code>master</code>ブランチに関連付ける役割もありました。</p>

<p>まぁ、そんだけです。</p>

<h3>※追記</h3>

<p>どうやらmasterブランチの歴史が書き換わる（初期化される）ので、
それが嫌なら自力で<code>_deploy</code>ディレクトリをセットアップするしかなさそうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlangのビルド]]></title>
    <link href="http://ksauzz.github.com/blog/2012/09/30/build-erlang/"/>
    <updated>2012-09-30T22:56:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/09/30/build-erlang</id>
    <content type="html"><![CDATA[<p>OSXへErlangをソースからいれた時のメモ。
&#8211;enable-darwin-64bitつけないと後でトラブるよ。という事でメモ。</p>

<pre><code>git clone git://github.com/erlang/otp.git
cd otp
git checkout -b OTP_R15B03 OTP_R15B03
./otp_build autoconf
./otp_build configure --disable-hipe --enable-smp-support --enable-threads --enable-kernel-poll  --enable-darwin-64bit --prefix=/usr/local/erlang/OTP_R15B03
make &amp;&amp; make install
</code></pre>

<p>PREFIXはお好みで。</p>

<p>あとは適当にPATHとか足しとく</p>

<h4>DTrace support</h4>

<p><code>--with-dynamic-trace=dtrace</code>をconfigureのオプションに追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./otp_build configure --with-dynamic-trace=dtrace --disable-hipe --enable-smp-support --enable-threads --enable-kernel-poll  --enable-darwin-64bit --prefix=/usr/local/erlang/OTP_R15B03</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[デフォルトディレクトリ以外へのHomebrewインストール]]></title>
    <link href="http://ksauzz.github.com/blog/2012/06/27/homebrew-install/"/>
    <updated>2012-06-27T03:15:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/06/27/homebrew-install</id>
    <content type="html"><![CDATA[<p>Homebrewはデフォルトで /usr/local へインストールされるが、
これを /usr/local/homebrew へインストールしたときの手順</p>

<h2>インストール</h2>

<pre><code>cd /usr/local
sudo git clone git://github.com/mxcl/homebrew.git homebrew
sudo chgrp -R staff homebrew bin include lib etc var
sudo chmod -R 775 homebrew bin include lib etc var
ln -s /usr/local/homebrew/bin/brew /usr/local/bin/brew
</code></pre>

<p>MANPATHを通しておく(.zshenv)</p>

<pre><code>export MANPATH=$MANPATH:/usr/local/homebrew/share/man
</code></pre>

<p>Homebrewはドキュメントにもあるように /usr/local にシンボリックリンクを作らなければならないので、
/usr/local/homebrew/bin へPATHを通してはいけない。</p>

<blockquote><p>Everything will install into ~/Developer, but your brew command is still in the path.
NOTE that Homebrew will still need to create symlinks into /usr/local or nothing will work!
But the actual files are installed to ~/Developer/Cellar.</p></blockquote>

<h2>デフォルトインストール時(/usr/local)のアンインストール手順</h2>

<p>アンインストールの手段が提供されていないので、個別にインストールファイルを削除する。</p>

<p>gistにアンインストール用のスクリプトが公開されているので、これを使うと便利。</p>

<p><a href="https://gist.github.com/1173223">https://gist.github.com/1173223</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cannot open shared object fileの対処]]></title>
    <link href="http://ksauzz.github.com/blog/2012/06/08/missing-shared-object/"/>
    <updated>2012-06-08T20:10:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/06/08/missing-shared-object</id>
    <content type="html"><![CDATA[<p>Linuxでshared objectが見つからない時の対処方法。いい加減メモっとく。</p>

<h2>事象</h2>

<p>svnを叩いたら libaprutil-1.so が見つからないと起こられた。</p>

<pre><code>svn: error while loading shared libraries: libaprutil-1.so.0: cannot open shared object file: No such file or directory
</code></pre>

<p>ちなみにapacheを/usr/local/apacheへインストールしたのにライブラリの検索パスを通してない事が原因。ということでパスを通しましょう。</p>

<h2>対応方法</h2>

<h3>1. lddでリンクしているライブラリを調べる</h3>

<p>やらなくても良いけど、とりあえず眺めとく。</p>

<pre><code>$ ldd `which svn`

-- 略 --

libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
libaprutil-1.so.0 =&gt; not found
libapr-1.so.0 =&gt; not found
</code></pre>

<p>はい、確かに見つかってないです。</p>

<h3>2. ライブラリの検索パス追加</h3>

<p>/etc/ld.so.conf.d/apache.conf を作成して以下を書く。</p>

<pre><code>/usr/local/apache/lib
</code></pre>

<p>もしくは /etc/ld.so.conf へ直接追記してもOK.</p>

<h3>3. リンクとキャッシュ(/etc/ld.so.cache)の更新</h3>

<p>ldconfig実行。</p>

<pre><code>$ ldconfig
</code></pre>

<p>-v オプションで詳細が出力されます。</p>

<h3>4. 動作確認</h3>

<p>パスが通ったか確認。</p>

<pre><code>$ ldconfig -p | grep libapr
libaprutil-1.so.0 (libc6,x86-64) =&gt; /usr/local/apache/lib/libaprutil-1.so.0
libaprutil-1.so.0 (libc6) =&gt; /usr/lib/libaprutil-1.so.0
libaprutil-1.so (libc6,x86-64) =&gt; /usr/local/apache/lib/libaprutil-1.so
libapr-1.so.0 (libc6,x86-64) =&gt; /usr/local/apache/lib/libapr-1.so.0
libapr-1.so.0 (libc6) =&gt; /usr/lib/libapr-1.so.0
libapr-1.so (libc6,x86-64) =&gt; /usr/local/apache/lib/libapr-1.so
</code></pre>

<p>はい、認識されました。</p>

<p>svnを実行してみます。</p>

<pre><code>$ svn
使用方法を知りたいときは 'svn help' と打ってください。
</code></pre>

<p>無事実行できました。</p>

<h2>参考</h2>

<ul>
<li><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man8/ld.so.8.html">ld.so</a></li>
<li><a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man8/ldconfig.8.html">ldconfig</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZeroMQ Rubyバインディングのインストール]]></title>
    <link href="http://ksauzz.github.com/blog/2012/06/02/zmq-ruby-setup/"/>
    <updated>2012-06-02T18:34:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/06/02/zmq-ruby-setup</id>
    <content type="html"><![CDATA[<p>そろそろ<a href="http://www.zeromq.org/">ZeroMQ</a>を触ろうか、ということでRubyバインディングをとりあえずインストール。</p>

<p>ZeroMQのRubyバインディングは<a href="https://github.com/zeromq/rbzmq">rbzmq</a>と<a href="https://github.com/chuckremes/ffi-rzmq">ffi-rzmq</a>があります。
rbzmqは公式のRubyバインディングでffi-rzmqは<a href="http://www.slideshare.net/copiousfreetime/ffi-building-cross-engine-ruby-extensions">ffi</a>版です。
ffiに関しては、さっぱり詳しくないのですが、
MatzRuby使ってる分には基本rbzmqの方で良いのかなと思ってます。
ffi-rzmqをインストールしたのは<a href="https://github.com/andrewvc/learn-ruby-zeromq">learn-ruby-zeromq</a>を動かしたかった、というだけの理由です。</p>

<p>以下、MacOSでのお話…。</p>

<h2>ZeroMQのインストール</h2>

<p>とりあえずZeroMQをインストールします。
特になにも考えず現在のStable版である2.2.0を入れました。
今回はソースビルドしていて、インストール先は/usr/local/zmqです。</p>

<pre><code>git clone https://github.com/zeromq/zeromq2-x.git
cd zeromq2-x
git checkout v2.2.0
./autogen.sh
./configure --prefix=/usr/local/zmq
make
sudo make install
</code></pre>

<h2>rbzmqのインストール</h2>

<p>&#8211;with-zmq-dirでインストールパスを指定します。</p>

<pre><code>gem install zmq -- --with-zmq-dir=/usr/local/zmq
</code></pre>

<h2>ffi-rzmqのインストール</h2>

<pre><code>gem install ffi-rzmq

echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/zmq/lib" &gt;&gt; ~/.zshrc
</code></pre>

<p>/usr/local/zmqへインストールしたので、LD_LIBRARY_PATHの指定をしておかないと実行時にコケます。</p>

<p>インストール作業は以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cowboy clientを使う]]></title>
    <link href="http://ksauzz.github.com/blog/2012/05/24/cowboy-client/"/>
    <updated>2012-05-24T20:43:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/05/24/cowboy-client</id>
    <content type="html"><![CDATA[<p>ErlangのWebフレームワークCowboyにはcowboy_clientというクライアントモジュールが含まれています。
今回はこのcowboy_clientの基本的な使い方を紹介します。</p>

<h2>利用方法</h2>

<p>cowboy_clientは以下の流れで利用します。</p>

<ol>
<li>clientレコードの生成 (init/1)</li>
<li>接続の確立 (connect/4)</li>
<li>リクエスト送信 (request/3, request/4, request/5)</li>
<li>レスポンスヘッダーの取得 (response/1)</li>
<li>レスポンスの取得 (response_body/1)</li>
</ol>


<p>これを実際のコードで表現すると、こんな感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Client1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">init</span><span class="p">([]),</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Client2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">connect</span><span class="p">(</span><span class="n">cowboy_tcp_transport</span><span class="p">,</span> <span class="s">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">,</span> <span class="nv">Client1</span><span class="p">),</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Client3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">request</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;GET&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;/contents.html&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">Client2</span><span class="p">),</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Status</span><span class="p">,</span> <span class="nv">Headers</span><span class="p">,</span> <span class="nv">Client4</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">response</span><span class="p">(</span><span class="nv">Client3</span><span class="p">),</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Body</span><span class="p">,</span> <span class="nv">Client5</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">response_body</span><span class="p">(</span><span class="nv">Client4</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>以降でinit/1以外の各行を個別に確認してゆきます。</p>

<h3>接続の確立 (connect/4)</h3>

<p>Transport, Host, Portを指定してコネクションを生成します。
恐らくSSL通信の場合はcowboy_ssl_transportを利用すると思われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Client2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">connect</span><span class="p">(</span><span class="n">cowboy_tcp_transport</span><span class="p">,</span> <span class="s">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">,</span> <span class="nv">Client1</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<h3>HTTPリクエスト (request/4)</h3>

<p>request関数は３種類用意されています。
リクエストヘッダー、リクエストボディ設定の有無でこれらを使い分けます。</p>

<ul>
<li>request(Method, Url, Client)</li>
<li>request(Method, Url, Headers, Client)</li>
<li>request(Method, Url, Headers, Data, Client)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Client3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">request</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;GET&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;/contents.html&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">Client2</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、Headerは以下のようなリストで指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">[{</span><span class="o">&lt;&lt;</span><span class="s">&quot;connection&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;close&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>HTTPレスポンス (response/1, response_body/1)</h3>

<p>ヘッダー、ステータスコードの取得(response/1)とボディの取得(response_body/1)は、個別に行う必要があります。
必要に応じてコールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Status</span><span class="p">,</span> <span class="nv">Headers</span><span class="p">,</span> <span class="nv">Client4</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">response</span><span class="p">(</span><span class="nv">Client3</span><span class="p">),</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Body</span><span class="p">,</span> <span class="p">_</span><span class="nv">Client5</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">response_body</span><span class="p">(</span><span class="nv">Client4</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上がリクエスト送信からレスポンス受信までの流れです。</p>

<h2>その他</h2>

<h3>POSTリクエスト</h3>

<p>POSTする場合は、request/4を使用してPOSTメソッドの指定、リクエストボディを指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Method</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="s">&quot;POST&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class='line'><span class="nv">Url</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="s">&quot;/post_content&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class='line'><span class="nv">Headers</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'><span class="nv">Data</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="s">&quot;key=value&quot;</span><span class="o">&gt;&gt;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Client3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">request</span><span class="p">(</span><span class="nv">Method</span><span class="p">,</span> <span class="nv">Url</span><span class="p">,</span> <span class="nv">Headrs</span><span class="p">,</span> <span class="nv">Data</span><span class="p">,</span> <span class="nv">Client2</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<h3>raw_request/2</h3>

<p>cowboy_clientでは生のHTTPリクエストを送信するraw_request/2関数が用意されています。
テスト目的でイレギュラーなHTTPリクエストを送信するときに便利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Client1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">init</span><span class="p">([]),</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Client2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">connect</span><span class="p">(</span><span class="n">cowboy_tcp_transport</span><span class="p">,</span> <span class="s">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">,</span> <span class="nv">Client1</span><span class="p">),</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Client3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">raw_request</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;GET /contents.html HTTP/1.1</span><span class="se">\r\n</span><span class="s">Host: localhost</span><span class="se">\r\n\r\n</span><span class="s">&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Client2</span><span class="p">),</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Status</span><span class="p">,</span> <span class="nv">Headers</span><span class="p">,</span> <span class="nv">Client4</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">response</span><span class="p">(</span><span class="nv">Client3</span><span class="p">),</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Body</span><span class="p">,</span> <span class="p">_</span><span class="nv">Client5</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_client</span><span class="p">:</span><span class="n">response_body</span><span class="p">(</span><span class="nv">Client4</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上、大雑把なcowboy_clientの紹介でした。</p>

<p>そもそもcowboyのテストを書くために書かれたモジュールのようなので、
基本的にはHTTP周りのテストを書く際に利用すると良いかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cowboyメモ]]></title>
    <link href="http://ksauzz.github.com/blog/2012/05/04/cowboy/"/>
    <updated>2012-05-04T21:50:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/05/04/cowboy</id>
    <content type="html"><![CDATA[<p>CowboyはErlangの軽量Webアプリケーションフレームワークです。
まだドキュメント化されていない部分が多いので軽くメモ。</p>

<h2>基本</h2>

<p>基本的な利用方法は某氏のブログをどうぞ。</p>

<p><a href="http://d.hatena.ne.jp/Voluntas/20120407/1333784371">http://d.hatena.ne.jp/Voluntas/20120407/1333784371</a></p>

<h2>リクエストの処理</h2>

<p>cowboyではhandle/2の引数に<a href="https://github.com/extend/cowboy/blob/master/include/http.hrl">#http_req</a>が渡ってきます。
基本的にはこのhttp_reqをcowboy_http_reqの関数へ渡し、リクエストデータの取得、レスポンスデータの生成を行います。</p>

<h3>レスポンスの送信</h3>

<p>レスポンスの送信にはcowboy_http_req:reply/xを使います。
下記ではステータスコード、レスポンスボディ、レスポンスヘッダーをreply関数へ渡し、
レスポンスを送信しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">handle</span><span class="p">(</span><span class="nv">Req</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">StatusCode</span>  <span class="o">=</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">Body</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="s">&quot;Hello world!!&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">Header</span> <span class="o">=</span> <span class="p">[{</span><span class="n">&#39;Server&#39;</span><span class="p">,</span> <span class="p">[</span><span class="o">&lt;&lt;</span><span class="s">&quot;Hello Cowboy Server!!!&quot;</span><span class="o">&gt;&gt;</span><span class="p">]}],</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Req2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_http_req</span><span class="p">:</span><span class="n">reply</span><span class="p">(</span><span class="nv">StatusCode</span><span class="p">,</span> <span class="nv">Header</span><span class="p">,</span> <span class="nv">Body</span><span class="p">,</span> <span class="nv">Req</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Req2</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードはcowboy_http_reqモジュールのset_resp_xxx関数を使って以下の様に書くこともできます。
ここで新しく生成されるReq_x_には、セットしたレスポンスボディ、レスポンスヘッダーがセットされています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">handle</span><span class="p">(</span><span class="nv">Req</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">StatusCode</span>  <span class="o">=</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">Body</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="s">&quot;Hello world!!&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Req1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_http_req</span><span class="p">:</span><span class="n">set_resp_body</span><span class="p">(</span><span class="nv">Body</span><span class="p">,</span> <span class="nv">Req</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Req2</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_http_req</span><span class="p">:</span><span class="n">set_resp_header</span><span class="p">(</span><span class="n">&#39;Server&#39;</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;Hello Cowboy Server!!&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Req1</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Req3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_http_req</span><span class="p">:</span><span class="n">reply</span><span class="p">(</span><span class="nv">StatusCode</span><span class="p">,</span> <span class="nv">Req2</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Req3</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>URL Queryの取得</h3>

<p>Queryはcowboy_http_req:qs_vals/1, qs_val/2, qs_val/3で取得できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">handle</span><span class="p">(</span><span class="nv">Req</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">QsList</span><span class="p">,</span> <span class="nv">Req1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_http_req</span><span class="p">:</span><span class="n">qs_vals</span><span class="p">(</span><span class="nv">Req</span><span class="p">),</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">Value</span><span class="p">,</span> <span class="nv">Req1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_http_req</span><span class="p">:</span><span class="n">qs_val</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;key&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Req</span><span class="p">),</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">ValueOrDefault</span><span class="p">,</span> <span class="nv">Req1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_http_req</span><span class="p">:</span><span class="n">qs_val</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;key&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Req</span><span class="p">,</span> <span class="nv">DefautVal</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Postデータの取得</h3>

<p>postしたデータはcowboy_http_req:body_qs/1で取得できます。
データはproplistsで返ってきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">handle</span><span class="p">(</span><span class="nv">Req</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">QsList</span><span class="p">,</span> <span class="nv">Req1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_http_req</span><span class="p">:</span><span class="n">body_qs</span><span class="p">(</span><span class="nv">Req</span><span class="p">),</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="n">keyfind</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;key&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">QsList</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="n">false</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="p">...,</span>
</span><span class='line'>        <span class="p">{</span><span class="o">&lt;&lt;</span><span class="s">&quot;key&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="p">....</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Cookie操作</h2>

<p>cookieの操作も同様にcowboy_http_req:cookie/2, set_resp_cookie/3を使います。</p>

<h3>Cookieの取得</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">handle</span><span class="p">(</span><span class="nv">Req</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">cowboy_http_req</span><span class="p">:</span><span class="n">cookie</span><span class="p">(</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">Req</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">{</span><span class="n">undefined</span><span class="p">,</span> <span class="nv">Req1</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>        <span class="p">{</span><span class="nv">SessionId</span><span class="p">,</span> <span class="nv">Req1</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Cookieのセット</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">handle</span><span class="p">(</span><span class="nv">Req</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span>  <span class="nv">Req1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">cowboy_http_req</span><span class="p">:</span><span class="n">set_resp_cookie</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="s">&quot;Key&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;Value&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[</span><span class="n">max_age</span><span class="p">,</span> <span class="mi">1000</span><span class="p">],</span>  <span class="nv">Req</span><span class="p">),</span>
</span><span class='line'>    <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>静的ファイルの処理(cowboy_http_static)</h2>

<p>静的ファイルをレスポンスに利用する場合、
cowboy_http_staticが用意されているので、これを使います。</p>

<p><strong>cowboy_http_staticは2012/05/07現在experimentalです。</strong></p>

<h3>Dispatch設定</h3>

<p>cowboyのlistener起動時に指定するdispatcher設定でcowboy_http_staticをhandlerとして指定します。
そしてOptionにdirectory, mimetypsを指定します。</p>

<p>下記の例では/static/xxxへのアクセスに対してcowboy_http_staticが使用されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Dispatch</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="n">&#39;_&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{[</span><span class="o">&lt;&lt;</span><span class="s">&quot;static&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="n">&#39;...&#39;</span><span class="p">],</span> <span class="n">cowboy_http_static</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span><span class="n">directory</span><span class="p">,</span> <span class="p">{</span><span class="n">priv_dir</span><span class="p">,</span> <span class="n">application_name</span><span class="p">,</span> <span class="p">[</span><span class="o">&lt;&lt;</span><span class="s">&quot;www&quot;</span><span class="o">&gt;&gt;</span><span class="p">]}},</span>
</span><span class='line'>                <span class="p">{</span><span class="n">mimetypes</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span><span class="o">&lt;&lt;</span><span class="s">&quot;.html&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[</span><span class="o">&lt;&lt;</span><span class="s">&quot;text/html&quot;</span><span class="o">&gt;&gt;</span><span class="p">]},</span>
</span><span class='line'>                        <span class="p">{</span><span class="o">&lt;&lt;</span><span class="s">&quot;.css&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span>  <span class="p">[</span><span class="o">&lt;&lt;</span><span class="s">&quot;text/css&quot;</span><span class="o">&gt;&gt;</span><span class="p">]},</span>
</span><span class='line'>                        <span class="p">{</span><span class="o">&lt;&lt;</span><span class="s">&quot;.js&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span>   <span class="p">[</span><span class="o">&lt;&lt;</span><span class="s">&quot;application/javascript&quot;</span><span class="o">&gt;&gt;</span><span class="p">]}]]}]},</span>
</span><span class='line'>        <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>directoryオプション</h3>

<p>静的ファイルのルートディレクトリ。priv_dirを指定すると指定したアプリケーションのprivディレクトリが参照されます。
直接ディレクトリを指定することも可能です。</p>

<p>以下、cowboy_http_staticのedocより</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'>  <span class="c">%% Serve files from /var/www/ under http://example.com/static/</span>
</span><span class='line'>  <span class="p">{[</span><span class="o">&lt;&lt;</span><span class="s">&quot;static&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="n">&#39;...&#39;</span><span class="p">],</span> <span class="n">cowboy_http_static</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[{</span><span class="n">directory</span><span class="p">,</span> <span class="s">&quot;/var/www&quot;</span><span class="p">}]}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">%% Serve files from the current working directory under http://example.com/static/</span>
</span><span class='line'>  <span class="p">{[</span><span class="o">&lt;&lt;</span><span class="s">&quot;static&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="n">&#39;...&#39;</span><span class="p">],</span> <span class="n">cowboy_http_static</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[{</span><span class="n">directory</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;./&quot;</span><span class="o">&gt;&gt;</span><span class="p">}]}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">%% Serve files from cowboy/priv/www under http://example.com/</span>
</span><span class='line'>  <span class="p">{[</span><span class="n">&#39;...&#39;</span><span class="p">],</span> <span class="n">cowboy_http_static</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[{</span><span class="n">directory</span><span class="p">,</span> <span class="p">{</span><span class="n">priv_dir</span><span class="p">,</span> <span class="n">cowboy</span><span class="p">,</span> <span class="p">[</span><span class="o">&lt;&lt;</span><span class="s">&quot;www&quot;</span><span class="o">&gt;&gt;</span><span class="p">]}}]}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>mimetypesオプション</h3>

<p>静的ファイルの拡張子毎にConten-Typeを指定します。</p>

<p>Content-Typeのデフォルト値が<em>application/octet-stream</em>になっているので、
適切な値を設定する必要があります。</p>

<p><a href="https://github.com/spawngrid/mimetypes">spawngrid/mimetypes</a>を使うことでmimetypesを、
以下の様にも書ける様です。(未検証)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">mimetypes</span><span class="p">,</span> <span class="p">{</span><span class="k">fun</span> <span class="nn">mimetypes</span><span class="p">:</span><span class="n">path_to_mimes</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">default</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitメモ]]></title>
    <link href="http://ksauzz.github.com/blog/2012/05/02/gitmemo/"/>
    <updated>2012-05-02T23:29:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/05/02/gitmemo</id>
    <content type="html"><![CDATA[<p>Gitのメモ
git-svnがメインかも…</p>

<h1>git svn</h1>

<table>
<thead>
<tr>
<th> 説明                                     </th>
<th> コマンド</th>
</tr>
</thead>
<tbody>
<tr>
<td> 標準ディレクトリ構成にてクローン         </td>
<td>  git svn clone -s &#8211;prefix=svn/ <em>url</em></td>
</tr>
<tr>
<td> clone時のリビジョン指定(depth)           </td>
<td>  git svn clone -s &#8211;prefix=svn/ -r $REV:HEAD <em>url</em></td>
</tr>
<tr>
<td> svnの変更に追従                          </td>
<td>  git svn rebase</td>
</tr>
<tr>
<td> svnへコミット                            </td>
<td>  git svn dcommit</td>
</tr>
<tr>
<td> svnリポジトリの変更を取得                </td>
<td>  git svn fetch svn</td>
</tr>
<tr>
<td> svn側にブランチ作成                      </td>
<td>  git svn branch <em>branch</em></td>
</tr>
<tr>
<td> svn側にタグ打ち                          </td>
<td>  git svn tag <em>version</em> (-n dry-run)</td>
</tr>
<tr>
<td> svnブランチに紐付くローカルブランチの作成</td>
<td>  git branch <em>local-branch</em> <em>remotes/svn/branch</em></td>
</tr>
<tr>
<td>                                          </td>
<td>  git checkout -b <em>local-branch</em> <em>remotes/svn/branch</em></td>
</tr>
</tbody>
</table>


<h2>merge時の注意</h2>

<p>svnブランチを参照しているブランチからmergeするときは<code>--no-ff</code>オプションを使うこと。fast-fowardだとremoteブランチが切り替わる。
誤って実行した場合はreset等で対処。</p>

<h2>ローカルブランチのコミットを履歴を維持したままsvnブランチへコミットする</h2>

<pre><code>git branch local_branch
// edit &amp; commit
git svn branch remote_branch
git checkout -b svn_sync_branch remotes/svn/remote_branch
git rebase svn_sync_branch
git svn dcommit
</code></pre>

<h1>git flow</h1>

<ul>
<li><a href="https://github.com/nvie/gitflow">git plugin</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful git branching model.</a></li>
<li><a href="http://keijinsonyaban.blogspot.jp/2010/10/successful-git-branching-model.html">日本語訳</a></li>
</ul>


<h2>既存プロジェクトの初期化</h2>

<pre><code>git clone url
git checkout --track origin/master
git flow init
</code></pre>

<p>これをしないとdevelopの変更がlocalのmasterに入ってしまう。</p>

<h2>featureコマンド</h2>

<table>
<thead>
<tr>
<th> 説明                                   </th>
<th> コマンド</th>
</tr>
</thead>
<tbody>
<tr>
<td> featureブランチ作成                    </td>
<td>  git flow feature start <em>branch</em></td>
</tr>
<tr>
<td> featureブランチ終了(developへのmerge)  </td>
<td>  git flow feature finish <em>branch</em></td>
</tr>
<tr>
<td> featureブランチをpush                  </td>
<td>  git flow feature publish <em>branch</em></td>
</tr>
<tr>
<td> featureブランチのpull                  </td>
<td>  git flow feature pull origin <em>branch</em></td>
</tr>
</tbody>
</table>


<h1>その他</h1>

<h2>commit</h2>

<pre><code>git commit -m msg
git commit --amend
</code></pre>

<h2>checkout</h2>

<pre><code>git checkout -b branch_name
git checkout -b branch_name origin/branch
</code></pre>

<h2>rm</h2>

<p>remove from index</p>

<pre><code>git rm --cached item
</code></pre>

<h2>reset</h2>

<pre><code>git reset .
git reset --soft HEAD^
git reset --hard HEAD^
</code></pre>

<h2>rebase</h2>

<pre><code>rebase -i HEAD^^^
rebase --onto base_branch current_branch branch
</code></pre>

<h2>git reflog</h2>

<table>
<thead>
<tr>
<th>説明                 </th>
<th> コマンド</th>
</tr>
</thead>
<tbody>
<tr>
<td>rebase前の情報を取得 </td>
<td>  git reflog show <em>branch</em></td>
</tr>
</tbody>
</table>


<h2>git clean</h2>

<table>
<thead>
<tr>
<th> 説明               </th>
<th> コマンド</th>
</tr>
</thead>
<tbody>
<tr>
<td> .gitignoreを無視   </td>
<td>   git clean -x</td>
</tr>
<tr>
<td> ディレクトリも削除 </td>
<td>   git clean -d</td>
</tr>
</tbody>
</table>


<h2>change author and commiter</h2>

<pre><code>git filter-branch --commit-filter '
if [ "$GIT_COMMITTER_NAME" = "old_name" ]; then
    GIT_AUTHOR_NAME="new_author_name"
    GIT_AUTHOR_EMAIL="new_author_email"
    GIT_COMMITTER_NAME="new_comitter_name"
    GIT_COMMITTER_EMAIL="new_commiter_email"
fi
git commit-tree "$@"
' HEAD
</code></pre>

<p>参考：<a href="http://d.hatena.ne.jp/idesaku/20090908/1252419890">http://d.hatena.ne.jp/idesaku/20090908/1252419890</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlangと周辺技術のメモ]]></title>
    <link href="http://ksauzz.github.com/blog/2012/04/21/erlang-dev-memo/"/>
    <updated>2012-04-21T20:40:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/04/21/erlang-dev-memo</id>
    <content type="html"><![CDATA[<p>gistのメモを移行</p>

<h2>gen_server</h2>

<h3>trace debug</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nn">gen_server</span><span class="p">:</span><span class="n">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="no">?SERVER</span><span class="p">},</span> <span class="no">?MODULE</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[{</span><span class="n">debug</span><span class="p">,[</span><span class="nb">trace</span><span class="p">]}])</span>
</span></code></pre></td></tr></table></div></figure>


<h2>rebar</h2>

<h3>dependencies in rebar.config</h3>

<figure class='code'><figcaption><span>rebar.config </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="n">webmachine</span><span class="p">,</span> <span class="s">&quot;1.9.0&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;https://github.com/basho/webmachine.git&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">tag</span><span class="p">,</span><span class="s">&quot;1.9.0&quot;</span><span class="p">}}}</span>
</span><span class='line'><span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>generate skelton codes</h3>

<ul>
<li>./rebar create-app appid=xxx</li>
<li>./rebar create template=simplemod modid=xxx</li>
<li>./rebar create template=simplesrv srvid=xxx_serve</li>
</ul>


<h3>packaging</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir rel
</span><span class='line'><span class="nb">cd </span>rel
</span><span class='line'>../rebar create-node <span class="nv">nodeid</span><span class="o">=</span>ememcached
</span><span class='line'>../rebar generate
</span></code></pre></td></tr></table></div></figure>


<p>see: <a href="https://github.com/basho/rebar/tree/master/priv/templates">https://github.com/basho/rebar/tree/master/priv/templates</a></p>

<h2>dialyzer</h2>

<p>Static analysis tool. <a href="http://www.erlang.org/doc/man/dialyzer.html">http://www.erlang.org/doc/man/dialyzer.html</a></p>

<h3>build plt file</h3>

<pre><code>dialyzer --build_plt --apps erts kernel stdlib
</code></pre>

<h3>extend plt file</h3>

<pre><code>dialyzer --add_to_plt --apps mnesia
</code></pre>

<h3>analyse sources</h3>

<pre><code>dialyzer --src src/*.erl
</code></pre>

<h2>typer</h2>

<p>Type anotator.</p>

<h3>show type</h3>

<pre><code>typer -I include src/*.erl
</code></pre>

<h3>insert type into the erlang codes.</h3>

<pre><code>typer --annotate -I include src/*.erl
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang/OTPを利用したAcceptor Poolの実装]]></title>
    <link href="http://ksauzz.github.com/blog/2012/04/07/erlang-acceptor-pool/"/>
    <updated>2012-04-07T16:19:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/04/07/erlang-acceptor-pool</id>
    <content type="html"><![CDATA[<p>サーバを実装する際にはpreforkモデル云々でacceptor pool(worker pool?)を実装する事がある。
これをErlang/OTPで実装するにあたり、いくつかのOSSコードを参考にさせて頂いた。
これはその参考にさせて貰ったMochiweb, Kaiのacceptor pool実装に関するメモ。</p>

<h2><a href="https://github.com/mochi/mochiweb">Mochiweb</a></h2>

<p>MochiwebはMochi Media, Inc.が公開しているのErlang製の軽量Http Server.というかWeb Framework。</p>

<p>mochiwebではproc_libを使ってacceptor poolを実装している。
acceptorがクラッシュしてもsupervisorに頼らずに直接再起動をする実装がなされている。</p>

<p>MochiwebのCall sequence.<a href="https://gist.github.com/1981423#file_mochiweb.jpg">拡大図</a>
<img src="https://raw.github.com/gist/1981423/11f3715f369203dcbc3ecb9d06efb4639d5ceee4/mochiweb.jpg" width="1134" height="597" title="mochiweb call sequence" ></p>

<p>実際にacceptor poolを生成しているのはmochiweb_socket_server:new_acceptor_pool/2。
ここでmochiweb_acceptor経由でproc_lib:spawn_link/3を連続的に実行することでacceptor poolを生成している。</p>

<figure class='code'><figcaption><span>mochiweb_socket_server:new_acceptor_pool/1  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">new_acceptor_pool</span><span class="p">(</span><span class="nv">Listen</span><span class="p">,</span>
</span><span class='line'>                  <span class="nv">State</span><span class="o">=</span><span class="nl">#mochiweb_socket_server</span><span class="p">{</span><span class="n">acceptor_pool</span><span class="o">=</span><span class="nv">Pool</span><span class="p">,</span>
</span><span class='line'>                                                <span class="n">acceptor_pool_size</span><span class="o">=</span><span class="nv">Size</span><span class="p">,</span>
</span><span class='line'>                                                <span class="n">loop</span><span class="o">=</span><span class="nv">Loop</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">F</span> <span class="o">=</span> <span class="k">fun</span> <span class="p">(_,</span> <span class="nv">S</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="nv">Pid</span> <span class="o">=</span> <span class="nn">mochiweb_acceptor</span><span class="p">:</span><span class="n">start_link</span><span class="p">(</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Listen</span><span class="p">,</span> <span class="nv">Loop</span><span class="p">),</span>
</span><span class='line'>                <span class="nn">sets</span><span class="p">:</span><span class="n">add_element</span><span class="p">(</span><span class="nv">Pid</span><span class="p">,</span> <span class="nv">S</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">Pool1</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="n">foldl</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span> <span class="nv">Pool</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Size</span><span class="p">)),</span>
</span><span class='line'>    <span class="nv">State</span><span class="nl">#mochiweb_socket_server</span><span class="p">{</span><span class="n">acceptor_pool</span><span class="o">=</span><span class="nv">Pool1</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>acceptorがクラッシュした場合にはmochiweb_server_socketでクラッシュのメッセージを受け取り、
ここでacceptorを起動する仕組みになっている。当然、process_flag(trap_exit, true)は事前に呼ばれている。</p>

<h2><a href="http://sourceforge.net/projects/kai/develop">Kai</a></h2>

<p>国産のErlangで実装されたKVS. Amazon Dynamoクローン。<a href="http://www.slideshare.net/takemaru/kai-an-open-source-implementation-of-amazons-dynamo-in-japanese">slideshare</a></p>

<p>Kaiはsupervisorを利用してacceptor poolを実装している。supervisor:start_linkにacceptorの定義をリストにして渡すことで、
supervisorのworkerとしてacceptorを多数起動し、これによりpoolを実現している。当然、acceptorの再起動もSupervisor任せである。</p>

<p>acceptor定義のListを生成しているのは以下のkai_tcp_sup:acceptor_spec/6である。</p>

<figure class='code'><figcaption><span>kai_tcp_server_sup:acceptor_specs/6  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">acceptor_specs</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">ListenSocket</span><span class="p">,</span> <span class="nv">State</span><span class="p">,</span> <span class="p">{</span><span class="nv">Dest</span><span class="p">,</span> <span class="nv">Name</span><span class="p">},</span> <span class="nv">MonitorBaseName</span><span class="p">,</span> <span class="nv">Mod</span><span class="p">,</span> <span class="nv">Option</span>
</span><span class='line'><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nl">#tcp_server_option</span><span class="p">{</span>
</span><span class='line'>        <span class="n">max_processes</span> <span class="o">=</span> <span class="nv">MaxProcesses</span><span class="p">,</span>
</span><span class='line'>        <span class="n">shutdown</span>      <span class="o">=</span> <span class="nv">Shutdown</span>
</span><span class='line'>    <span class="p">}</span> <span class="o">=</span> <span class="nv">Option</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">MonitorName</span> <span class="o">=</span> <span class="k">case</span> <span class="nv">Dest</span> <span class="k">of</span>
</span><span class='line'>      <span class="n">local</span>   <span class="o">-&gt;</span> <span class="nv">MonitorBaseName</span><span class="p">;</span>
</span><span class='line'>      <span class="p">_</span><span class="nv">Global</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="nv">Dest</span><span class="p">,</span> <span class="nv">MonitorBaseName</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span><span class="p">,</span>
</span><span class='line'>    <span class="nn">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span>
</span><span class='line'>        <span class="k">fun</span> <span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">AcceptorName</span> <span class="o">=</span> <span class="n">build_acceptor_name</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">N</span><span class="p">),</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="nv">AcceptorName</span><span class="p">,</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">kai_tcp_server_acceptor</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">start_link</span><span class="p">,</span>
</span><span class='line'>                    <span class="p">[</span>
</span><span class='line'>                        <span class="p">{</span><span class="nv">Dest</span><span class="p">,</span> <span class="nv">AcceptorName</span><span class="p">},</span>
</span><span class='line'>                        <span class="nv">ListenSocket</span><span class="p">,</span>
</span><span class='line'>                        <span class="nv">State</span><span class="p">,</span>
</span><span class='line'>                        <span class="nv">MonitorName</span><span class="p">,</span>
</span><span class='line'>                        <span class="nv">Mod</span><span class="p">,</span>
</span><span class='line'>                        <span class="nv">Option</span>
</span><span class='line'>                    <span class="p">]</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="n">permanent</span><span class="p">,</span>
</span><span class='line'>                <span class="nv">Shutdown</span><span class="p">,</span>
</span><span class='line'>                <span class="n">worker</span><span class="p">,</span>
</span><span class='line'>                <span class="p">[]</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="k">end</span><span class="p">,</span>
</span><span class='line'>        <span class="nn">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">MaxProcesses</span><span class="p">)</span>
</span><span class='line'>    <span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<h3>Acceptorの生成</h3>

<ul>
<li>Mochiweb: proc_libで個別に起動</li>
<li>kai: supervisor任せ</li>
</ul>


<h3>Acceptorの再起動</h3>

<ul>
<li>Mochiweb: 自前実装</li>
<li>kai: supervisor任せ</li>
</ul>


<p>なんか他のコードも読んだ気がしたけど、すっかり忘れてしまったので以上２つだけのまとめ。</p>

<p>ちなみに自分が実装する際にはKaiの方式を利用させて貰った。Supervisor便利である。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sbt]]></title>
    <link href="http://ksauzz.github.com/blog/2012/04/07/sbt-usage/"/>
    <updated>2012-04-07T15:00:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/04/07/sbt-usage</id>
    <content type="html"><![CDATA[<p>簡単にメモ</p>

<h2><a href="https://github.com/harrah/xsbt/wiki">simple build tool (version 0.11.x)</a></h2>

<p>scalaのビルドツール。
最近のバージョンでは基本的に対話モードで利用する雰囲気。</p>

<h2>よく使うコマンド</h2>

<table>
<thead>
<tr>
<th>コマンド名               </th>
<th> 説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>update                   </td>
<td> ライブラリ(dependenciew)取得</td>
</tr>
<tr>
<td>clean                    </td>
<td> cleanup target directories</td>
</tr>
<tr>
<td>run                      </td>
<td> main classの検索、一覧表示からの実行</td>
</tr>
<tr>
<td>run-main <em>classname</em> 　  </td>
<td> main classを明示的に指定して実行</td>
</tr>
<tr>
<td>console                  </td>
<td> scalaの対話型コンソール起動。:quitでconsoleから抜ける</td>
</tr>
<tr>
<td>tasks                    </td>
<td> タスク一覧表示</td>
</tr>
<tr>
<td>package                  </td>
<td> パッケージ(jar)の生成</td>
</tr>
</tbody>
</table>


<p>コマンドがよく分からなかったらtasksでコマンド一覧をながめて、help引いて使えばなんとかなる。</p>

<h2>usage</h2>

<ol>
<li>sbtを起動(基本起動させっぱなし)</li>
<li>consoleコマンドでREPL起動。コードの動作を確認しつつ、別windowで編集(vim)</li>
<li>書いたらcompileでビルド</li>
<li>run、もしくはrun-mainで実行</li>
</ol>


<p>という雰囲気で使ってる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimのビルド]]></title>
    <link href="http://ksauzz.github.com/blog/2012/04/01/building-vim/"/>
    <updated>2012-04-01T21:47:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/04/01/building-vim</id>
    <content type="html"><![CDATA[<p>ビルドオプションを忘れるのでメモ。mercurialのメモだったりもする。</p>

<pre><code>hg clone https://vim.googlecode.com/hg/ vim
cd vim
hg update v7-3-487
./configure --prefix=/usr/local/vim-7.3.487 --with-features=huge --enable-multibyte --enable-pythoninterp --enable-rubyinterp
make &amp;&amp; make install
cd /usr/local
ln -s vim-7.3.487 vim
</code></pre>

<h3>misc</h3>

<p>tagの確認</p>

<pre><code>hg tags
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setup perlbrew and cpanminus.]]></title>
    <link href="http://ksauzz.github.com/blog/2012/03/30/perlbrew/"/>
    <updated>2012-03-30T19:38:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/03/30/perlbrew</id>
    <content type="html"><![CDATA[<h1>perlbrew</h1>

<p><a href="http://perlbrew.pl/">http://perlbrew.pl/</a></p>

<p>install perlbrew into <em>$HOME/.perlbrew</em> (default install path is <em>$HOME/perl5</em>)</p>

<pre><code>echo "export PERLBREW_ROOT=$HOME/.perlbrew" &gt;&gt; .zshrc
curl -kL http://install.perlbrew.pl | bash
echo "[[ -s ~/.perlbrew/etc/bashrc ]] &amp;&amp; source ~/.perlbrew/etc/bashrc" &gt;&gt; .zshrc

perlbrew install perl-5.15.9
perlbrew switch perl-5.15.9
</code></pre>

<h1>cpanminus</h1>

<p><a href="https://github.com/miyagawa/cpanminus">https://github.com/miyagawa/cpanminus</a></p>

<p>install cpanm</p>

<pre><code>perlbrew install-cpanm
</code></pre>

<p>install module</p>

<pre><code>cpanm module_name
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenv ruby-build rbenv-gemsetのセットアップ]]></title>
    <link href="http://ksauzz.github.com/blog/2012/03/23/rbenv-ruby-build-rbenv-gemset/"/>
    <updated>2012-03-23T21:53:00+09:00</updated>
    <id>http://ksauzz.github.com/blog/2012/03/23/rbenv-ruby-build-rbenv-gemset</id>
    <content type="html"><![CDATA[<p>近頃、RVMはオワコン呼ばわりされているので、rbenvを使ってます。
Linuxへのインストール手順のまとめが見当たらなかったのでまとめておきます。</p>

<h1>MacOS</h1>

<pre><code>sudo brew install rbenv ruby-build rbenv-gemset
</code></pre>

<h2>rbenv with homebrew&#8217;s readline</h2>

<p>参考： <a href="http://blog.twiwt.org/e/66a1d0">http://blog.twiwt.org/e/66a1d0</a></p>

<pre><code>brew install readline
brew link readline
CONFIGURE_OPTS="--with-readline-dir=/usr/local" rbenv install 1.9.2-p290
</code></pre>

<h1>Linux</h1>

<h2>install rbenv</h2>

<p>ダウンロード</p>

<pre><code>cd
git clone git://github.com/sstephenson/rbenv.git .rbenv
</code></pre>

<p>シェルの設定(zsh)</p>

<pre><code>echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.zshrc
echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.zshrc
source ~/.zshrc
</code></pre>

<p><em>bashの場合は ~/.bash_profileへ設定する.</em></p>

<h3>system wide install</h3>

<p>System wideでインストールする場合には /usr/local/rbenv へインストールします。</p>

<pre><code>cd /usr/local
git clone git://github.com/sstephenson/rbenv.git
</code></pre>

<p>初期設定は /etc/profile.d/rbenv.sh へいれます。</p>

<pre><code>echo 'export PATH="/usr/local/rbenv/bin:$PATH"' &gt;&gt; /etc/profile.d/rbenv.sh
echo 'eval "$(rbenv init -)"' &gt;&gt; /etc/profile.d/rbenv.sh
</code></pre>

<p>参考：<a href="https://github.com/sstephenson/rbenv/wiki/shared-install-of-rbenv">shared-install-of-rbenv</a></p>

<h3>trouble shoot</h3>

<p>シェル初期化時に以下のエラーが発生することがある。</p>

<pre><code>$HOME/.rbenv/libexec/../completions/rbenv.bash:14: command not found: complete
</code></pre>

<p>この場合、.zshrcの設定を以下に変更</p>

<pre><code>eval "$(rbenv init - zsh)"
</code></pre>

<h2>install ruby-build</h2>

<pre><code>mkdir -p ~/.rbenv/plugins
cd ~/.rbenv/plugins
git clone git://github.com/sstephenson/ruby-build.git
</code></pre>

<h2>install rbenv-gemset</h2>

<pre><code>mkdir -p ~/.rbenv/plugins
cd ~/.rbenv/plugins
git clone git://github.com/jamis/rbenv-gemset.git
</code></pre>

<h1>Usage</h1>

<h2>install ruby</h2>

<pre><code>rbenv install 1.9.2-p290
rbenv global 1.9.2-p290
rbenv rehash
</code></pre>

<h2>freeze ruby version</h2>

<pre><code>cd your-project-dir
rbenv local 1.9.2-p290
</code></pre>

<h2>make my gemset</h2>

<pre><code>cd your-project-dir
rbenv gemset create 1.9.2-p290 my-gemset 
echo my-gemset &gt; .rbenv-gemsets
</code></pre>
]]></content>
  </entry>
  
</feed>
